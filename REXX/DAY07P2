/* REXX */                                                              00010000
                                                                        00020000
/* Somehow...... grrrr */                                               00021099
p = ''                                                                  00030000
p = p || '3, 8, 1001, 8, 10, 8, 105, '                                  00040000
p = p || '1, 0, 0, 21, 38, 47, 72, '                                    00041000
p = p || '97, 122, 203, 284, 365, 446, 99999, '                         00042000
p = p || '3, 9, 1001, 9, 3, 9, 1002, '                                  00043000
p = p || '9, 5, 9, 1001, 9, 4, 9, '                                     00044000
p = p || '4, 9, 99, 3, 9, 102, 3, '                                     00045000
p = p || '9, 9, 4, 9, 99, 3, 9, '                                       00046000
p = p || '1001, 9, 2, 9, 102, 5, 9, '                                   00047000
p = p || '9, 101, 3, 9, 9, 1002, 9, '                                   00047100
p = p || '5, 9, 101, 4, 9, 9, 4, '                                      00047200
p = p || '9, 99, 3, 9, 101, 5, 9, '                                     00047300
p = p || '9, 1002, 9, 3, 9, 101, 2, '                                   00047400
p = p || '9, 9, 102, 3, 9, 9, 1001, '                                   00047500
p = p || '9, 2, 9, 4, 9, 99, 3, '                                       00047600
p = p || '9, 101, 3, 9, 9, 102, 2, '                                    00047700
p = p || '9, 9, 1001, 9, 4, 9, 1002, '                                  00047800
p = p || '9, 2, 9, 101, 2, 9, 9, '                                      00047900
p = p || '4, 9, 99, 3, 9, 1001, 9, '                                    00048000
p = p || '2, 9, 4, 9, 3, 9, 101, '                                      00048100
p = p || '2, 9, 9, 4, 9, 3, 9, '                                        00048200
p = p || '102, 2, 9, 9, 4, 9, 3, '                                      00048300
p = p || '9, 1001, 9, 1, 9, 4, 9, '                                     00048400
p = p || '3, 9, 102, 2, 9, 9, 4, '                                      00048500
p = p || '9, 3, 9, 101, 2, 9, 9, '                                      00048600
p = p || '4, 9, 3, 9, 1001, 9, 1, '                                     00048700
p = p || '9, 4, 9, 3, 9, 101, 2, '                                      00048800
p = p || '9, 9, 4, 9, 3, 9, 101, '                                      00048900
p = p || '1, 9, 9, 4, 9, 3, 9, '                                        00049000
p = p || '1001, 9, 2, 9, 4, 9, 99, '                                    00049100
p = p || '3, 9, 1001, 9, 1, 9, 4, '                                     00049200
p = p || '9, 3, 9, 101, 1, 9, 9, '                                      00049300
p = p || '4, 9, 3, 9, 101, 2, 9, '                                      00049400
p = p || '9, 4, 9, 3, 9, 102, 2, '                                      00049500
p = p || '9, 9, 4, 9, 3, 9, 101, '                                      00049600
p = p || '2, 9, 9, 4, 9, 3, 9, '                                        00049700
p = p || '101, 1, 9, 9, 4, 9, 3, '                                      00049800
p = p || '9, 1002, 9, 2, 9, 4, 9, '                                     00049900
p = p || '3, 9, 101, 1, 9, 9, 4, '                                      00050000
p = p || '9, 3, 9, 102, 2, 9, 9, '                                      00050100
p = p || '4, 9, 3, 9, 102, 2, 9, '                                      00050200
p = p || '9, 4, 9, 99, 3, 9, 1001, '                                    00050300
p = p || '9, 2, 9, 4, 9, 3, 9, '                                        00050400
p = p || '1002, 9, 2, 9, 4, 9, 3, '                                     00050500
p = p || '9, 1001, 9, 2, 9, 4, 9, '                                     00050600
p = p || '3, 9, 102, 2, 9, 9, 4, '                                      00050700
p = p || '9, 3, 9, 102, 2, 9, 9, '                                      00050800
p = p || '4, 9, 3, 9, 101, 2, 9, '                                      00050900
p = p || '9, 4, 9, 3, 9, 1001, 9, '                                     00051000
p = p || '1, 9, 4, 9, 3, 9, 101, '                                      00051100
p = p || '1, 9, 9, 4, 9, 3, 9, '                                        00051200
p = p || '1002, 9, 2, 9, 4, 9, 3, '                                     00051300
p = p || '9, 102, 2, 9, 9, 4, 9, '                                      00051400
p = p || '99, 3, 9, 101, 1, 9, 9, '                                     00051500
p = p || '4, 9, 3, 9, 101, 1, 9, '                                      00051600
p = p || '9, 4, 9, 3, 9, 102, 2, '                                      00051700
p = p || '9, 9, 4, 9, 3, 9, 102, '                                      00051800
p = p || '2, 9, 9, 4, 9, 3, 9, '                                        00051900
p = p || '101, 2, 9, 9, 4, 9, 3, '                                      00052000
p = p || '9, 101, 2, 9, 9, 4, 9, '                                      00052100
p = p || '3, 9, 1001, 9, 2, 9, 4, '                                     00052200
p = p || '9, 3, 9, 1001, 9, 2, 9, '                                     00052300
p = p || '4, 9, 3, 9, 102, 2, 9, '                                      00052400
p = p || '9, 4, 9, 3, 9, 1001, 9, '                                     00052500
p = p || '1, 9, 4, 9, 99, 3, 9, '                                       00052600
p = p || '101, 2, 9, 9, 4, 9, 3, '                                      00052700
p = p || '9, 101, 2, 9, 9, 4, 9, '                                      00052800
p = p || '3, 9, 1001, 9, 2, 9, 4, '                                     00052900
p = p || '9, 3, 9, 102, 2, 9, 9, '                                      00053000
p = p || '4, 9, 3, 9, 102, 2, 9, '                                      00053100
p = p || '9, 4, 9, 3, 9, 101, 1, '                                      00053200
p = p || '9, 9, 4, 9, 3, 9, 1002, '                                     00053300
p = p || '9, 2, 9, 4, 9, 3, 9, '                                        00053400
p = p || '1002, 9, 2, 9, 4, 9, 3, '                                     00053500
p = p || '9, 101, 2, 9, 9, 4, 9, '                                      00053600
p = p || '3, 9, 1001, 9, 2, 9, 4, '                                     00053700
p = p || '9, 99'                                                        00053800
                                                                        00053900
                                                                        00054000
p = '3,26,1001,26,-4,26,3,27,1002,27,2,27,1,27,26,'                     00054199
p = p || '27,4,27,1001,28,-1,28,1005,28,6,99,0,0,5'                     00054299
                                                                        00054399
tv.0 = 5                                                                00055000
tv.1 = 5                                                                00056002
tv.2 = 6                                                                00057002
tv.3 = 7                                                                00058002
tv.4 = 8                                                                00059002
tv.5 = 9                                                                00060002
                                                                        00070000
                                                                        00070108
vms. = 5                                                                00070208
vms.1 = p                                                               00070308
vms.2 = p                                                               00070408
vms.3 = p                                                               00070508
vms.4 = p                                                               00070608
vms.5 = p                                                               00070708
                                                                        00070808
                                                                        00070935
say "---------------_"                                                  00075013
maxPower = 0                                                            00080000
powers=""                                                               00090000
/* this ugly bit is just permutating the possible initial inputs */     00091099
do a = 1 to tv.0                                                        00100000
  do b = 1 to tv.0                                                      00110000
    if b /= a then do                                                   00111000
      do c = 1 to tv.0                                                  00112000
        if c /= a & c /=b then do                                       00112100
          do d = 1 to tv.0                                              00112200
            if d /= a & d /= b & c /= d then do                         00112300
              do e = 1 to tv.0                                          00112400
                if e /= a & e /= b & e /= c & e /= d then do            00112500
                  in.1 = tv.a                                           00112638
                  in.2 = tv.b                                           00112738
                  in.3 = tv.c                                           00112838
                  in.4 = tv.d                                           00112938
                  in.5 = tv.e                                           00113038
                  state = null                                          00114070
                  prime.1 = 0                                           00114199
                  prime.2 = 0                                           00114299
                  prime.3 = 0                                           00114399
                  prime.4 = 0                                           00114499
                  prime.5 = 0                                           00114599
                  nextvm  = 6                                           00114699
                  firstrun = 1                                          00114799
                    vm = 1                                              00114899
                    vmstorun = vms.0                                    00114999
                    do while vm <= vmstorun                             00115099
                      /* Run the VM's prime input with sequence */      00115199
                      if vm < 6 then                                    00115299
                        if prime.vm = 0 then do                         00115399
                          input = in.vm                                 00115499
                          prime.vm = 1                                  00115599
                        end                                             00115699
                      state = run2(vms.vm,input)                        00116194
                      if pos('=',state) > 0 then do                     00116270
                        /* This VM needs more input */                  00116399
                        if vm = 1 & firstrun = 1 then do                00116499
                          firstrun = 0                                  00116599
                          /* Amp A get's a 0 as first extra input */    00116799
                          input = 0                                     00116899
                          vms.vm = state                                00116999
                          iterate                                       00117095
                        end                                             00117193
                        else do                                         00117293
                          /* Add the state of his VM to the queue */    00117399
                          vms.nextvm = state                            00117493
                          nextvm = nextvm + 1                           00117599
                          vm = vm + 1                                   00117693
                          vmstorun = vmstorun + 1                       00117793
                        end                                             00117893
                      end                                               00117970
                      else do                                           00118070
                        input = state                                   00118294
                        vm = vm + 1                                     00118393
                      end                                               00118470
                    end                                                 00118570
                  say state                                             00118699
                  totalPower = state                                    00118799
                  powers = powers","totalPower                          00118870
                  if totalPower > maxPower then do                      00118970
                    maxPower = totalPower                               00119070
                    maxConfig = tv.a tv.b tv.c tv.d tv.e                00119170
                  end                                                   00119270
                end                                                     00119370
              end                                                       00119470
            end                                                         00119570
          end                                                           00119670
        end                                                             00119770
      end                                                               00119870
    end                                                                 00119970
  end                                                                   00120070
end                                                                     00120170
say powers                                                              00120270
say maxPower                                                            00120370
say maxConfig                                                           00120470
                                                                        00120570
exit                                                                    00120670
                                                                        00120770
run2:                                                                   00120870
  parse arg prog,in1,in2                                                00120970
  res = "NO OUTPUT"                                                     00121070
  theInput = in1                                                        00121170
  /* check for saved state */                                           00121270
  if pos('=',prog) > 0 then do                                          00121390
    next = substr(prog,1,pos('=',prog)-1)      /* read saved ins pos */ 00121499
  end                                                                   00121590
  else                                                                  00121670
    next = 0                                                            00121770
  prog = translate(prog, ' ', ',')             /* get rid of commas  */ 00121970
  instructions = words(prog)                   /* count them all     */ 00122070
  p. = ''                                      /* stick em in a stem */ 00122170
  do i = 0 to instructions                                              00122299
    p.i= word(prog, i+1)                                                00122370
  end                                                                   00122470
  cont = 1                                     /* no halt psw :)     */ 00122570
  do while cont = 1                                                     00122670
    inst = right(p.next,'5',0)                 /* get the full inst  */ 00122770
    opcode = substr(inst,4,2)                  /* get the opcode     */ 00122870
    mod1   = substr(inst,3,1)                  /* mode 1st parm      */ 00122970
    mod2   = substr(inst,2,1)                  /* mode 2nd parm      */ 00123070
    mod3   = substr(inst,1,1)                  /* mode 3rd parm      */ 00123170
    select                                                              00123270
      when opcode = '01' then do               /* Addition           */ 00123370
        p1 =   next + 1                                                 00123470
        p2 =   next + 2                                                 00123570
        p3 =   next + 3                                                 00123670
        parm1 = p.p1                                                    00123770
        parm2 = p.p2                                                    00123870
        parm3 = p.p3                                                    00123970
        next = next + 4                                                 00124070
        if mod1 = 0 then parm1 = p.parm1                                00124170
        if mod2 = 0 then parm2 = p.parm2                                00124270
                                                                        00124370
                                                                        00124470
        p.parm3 = parm1 + parm2                                         00124570
        iterate                                                         00124670
      end                                                               00124770
      when opcode = '02' then do               /* Multiplication     */ 00124870
        p1 =   next + 1                                                 00124970
        p2 =   next + 2                                                 00125070
        p3 =   next + 3                                                 00125170
        parm1 = p.p1                                                    00125270
        parm2 = p.p2                                                    00125370
        parm3 = p.p3                                                    00125470
        next = next + 4                                                 00125570
        if mod1 = 0 then parm1 = p.parm1                                00125670
        if mod2 = 0 then parm2 = p.parm2                                00125770
                                                                        00125870
        p.parm3 = parm1 * parm2                                         00125970
        iterate                                                         00126070
      end                                                               00126170
      when opcode = '03' then do               /* Store              */ 00126270
        p1 =   next + 1                                                 00126370
        parm1 = p.p1                                                    00126470
        if theInput = null then do                                      00126570
            /* input needed, save state */                              00126670
            st    = next"="                                             00126799
            do x = 0 to instructions                                    00126870
              st    = st    || p.x                                      00126999
              if x <= instructions then                                 00127099
                st   = st    || ","                                     00127199
            end                                                         00127270
            return st                                                   00127399
        end                                                             00127470
        p.parm1 = theInput                                              00127500
        theInput = null                                                 00127699
        next = next + 2                                                 00127799
        iterate                                                         00127800
      end                                                               00127900
      when opcode = '04' then do               /* Output             */ 00128000
        p1 = next + 1                                                   00128100
        parm1 = p.p1                                                    00128200
        if mod1 = 0 then parm1 = p.parm1                                00128300
        res = parm1                                                     00128400
        next = next + 2                                                 00128500
        iterate                                                         00128600
      end                                                               00128700
      when opcode = '05' then do               /* Jump if true       */ 00128800
        p1 = next + 1                                                   00128900
        p2 = next + 2                                                   00129000
        parm1 = p.p1                                                    00129100
        parm2 = p.p2                                                    00129200
        if mod1 = 0 then parm1 = p.parm1                                00129300
        if mod2 = 0 then parm2 = p.parm2                                00129400
        if parm1 /= 0 then next = parm2                                 00129500
                      else next = next + 3                              00129600
      end                                                               00129700
      when opcode = '06' then do               /* Jump if false      */ 00129800
        p1 = next + 1                                                   00129900
        p2 = next + 2                                                   00130000
        parm1 = p.p1                                                    00130100
        parm2 = p.p2                                                    00130200
        if mod1 = 0 then parm1 = p.parm1                                00130300
        if mod2 = 0 then parm2 = p.parm2                                00130400
        if parm1 = 0 then next = parm2                                  00130500
                     else next = next + 3                               00130600
      end                                                               00130700
      when opcode = '07' then do               /* Less than          */ 00130800
        p1 = next + 1                                                   00130900
        p2 = next + 2                                                   00131000
        p3 = next + 3                                                   00131100
        parm1 = p.p1                                                    00131200
        parm2 = p.p2                                                    00131300
        parm3 = p.p3                                                    00131400
        if mod1 = 0 then parm1 = p.parm1                                00131500
        if mod2 = 0 then parm2 = p.parm2                                00131600
        if parm1 < parm2 then p.parm3 = 1                               00131700
                         else p.parm3 = 0                               00131800
        next = next + 4                                                 00131900
      end                                                               00132000
      when opcode = '08' then do               /* Equals             */ 00132100
        p1 = next + 1                                                   00132200
        p2 = next + 2                                                   00132300
        p3 = next + 3                                                   00132400
        parm1 = p.p1                                                    00132500
        parm2 = p.p2                                                    00132600
        parm3 = p.p3                                                    00132700
        if mod1 = 0 then parm1 = p.parm1                                00132800
        if mod2 = 0 then parm2 = p.parm2                                00132900
        if parm1 = parm2 then p.parm3 = 1                               00133000
                         else p.parm3 = 0                               00133100
        next = next + 4                                                 00133200
      end                                                               00133300
      when opcode = '99' then do               /* Terminate          */ 00133400
        cont = 0                                                        00133500
      end                                                               00133600
      otherwise do                                                      00133700
        say "unexpected opcode ("opcode") at "next                      00133800
      end                                                               00133900
    end                                                                 00134000
    if next > instructions then cont = 0                                00134100
  end                                                                   00134200
  return res                                                            00134300
                                                                        00134400
                                                                        00135001
