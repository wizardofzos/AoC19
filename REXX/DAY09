/* REXX */                                                              00010000
                                                                        00020000
p = '109,1,204,-1,1001,100,1,100,1008,100,16,101,1006,101,0,99'         00030012
q  = '1102,34915192,34915192,7,4,7,99,0'                                00040023
s = '104,1125899906842624,99'                                           00050025
                                                                        00054800
OMGINEEDDEBUG = 0                                                       00054920
                                                                        00055020
r = run2(p,null)                                                        00115202
say r                                                                   00123802
r = run2(q,null)                                                        00123923
say r                                                                   00124022
r = run2(s,null)                                                        00124125
say r                                                                   00124224
                                                                        00124324
exit                                                                    00124424
                                                                        00124524
run2:                                                                   00124624
  parse arg prog,in1,in2                                                00124724
  res = "NO OUTPUT"                                                     00124824
  theInput = in1                                                        00124924
  next = 0                                                              00125024
  relbase = 0                                                           00125124
  /* check for saved state */                                           00125224
  if pos('<',prog) > 0 then do                                          00125324
    next = substr(prog,1,pos('<',prog)-1)      /* read saved ins pos */ 00125424
    prog = substr(prog,pos('<',prog)+1)        /* for input wait     */ 00125524
  end                                                                   00125624
  if pos('>',prog) > 0 then do                                          00125724
    next = substr(prog,1,pos('>',prog)-1)      /* read saved ins pos */ 00125824
    prog = substr(prog,pos('=',prog)+1)        /* for output wait    */ 00125924
  end                                                                   00126024
  prog = translate(prog, ' ', ',')             /* get rid of commas  */ 00126124
  instructions = words(prog)                   /* count them all     */ 00126224
  p. = 0                                       /* stick em in a stem */ 00126324
  do i = 0 to instructions                                              00126424
    p.i= word(prog, i+1)                                                00126524
  end                                                                   00126624
  cont = 1                                     /* no halt psw :)     */ 00126724
  do while cont = 1                                                     00126824
    inst = right(p.next,'5',0)                 /* get the full inst  */ 00126924
    opcode = substr(inst,4,2)                  /* get the opcode     */ 00127024
    mod1   = substr(inst,3,1)                  /* mode parm1         */ 00127124
    mod2   = substr(inst,2,1)                  /*      parm2         */ 00127224
    mod3   = substr(inst,1,1)                  /*      parm3         */ 00127324
    p1     = next + 1                          /* position parm1     */ 00127424
    p2     = next + 2                          /*          parm2     */ 00127524
    p3     = next + 3                          /*          parm3     */ 00128003
    if mod1 = 0 then do                        /* postion mode       */ 00128109
      pp = p.p1                                /* value is data at   */ 00128200
      parm1 = p.pp                             /* value of pos p1    */ 00128300
    end                                                                 00128400
    if mod1 = 1 then                           /* immediate mode     */ 00128509
      parm1 = p.p1                             /* value is data at p1*/ 00128600
    if mod1 = 2 then do                        /* relative mode      */ 00128700
      pp = p.p1 + relbase                      /* value is data at   */ 00128800
      parm1 = p.pp                             /* value p1 + relbase */ 00128900
    end                                                                 00129000
    /* Value of parm2 */                                                00129100
    if mod2 = 0 then do                        /* postion mode       */ 00129209
      pp = p.p2                                /* value is data at   */ 00129300
      parm2 = p.pp                             /* value of pos p2    */ 00129400
    end                                                                 00129500
    if mod2 = 1 then                           /* immediate mode     */ 00129609
      parm2 = p.p2                             /* value is data at p2*/ 00129700
    if mod2 = 2 then do                        /* relative mode      */ 00129800
      pp = p.p2 + relbase                      /* value is data at   */ 00129900
      parm2 = p.pp                             /* value p2 + relbase */ 00130000
    end                                                                 00130100
    /* Value of parm3 */                                                00130200
    if mod3 = 0 then do                        /* postion mode       */ 00130409
      parm3 = p.p3                             /* value of pos p3    */ 00130610
    end                                                                 00130700
    if mod3 = 1 then                           /* immediate mode     */ 00130809
      say "cannot!"                            /* value is data at p3*/ 00130910
    if mod3 = 2 then do                        /* relative mode      */ 00131000
      say "Cannot!"                            /* value is data at   */ 00131110
    end                                                                 00131300
    f = debug('opcode='opcode)                                          00131418
    f = debug('relbase='relbase)                                        00131518
    f = debug('parm1='parm1)                                            00131615
    f = debug('parm2='parm1)                                            00131716
    f = debug('parm2='parm3)                                            00131815
    select                                                              00131915
      when opcode = '01' then do               /* Addition           */ 00132015
        p.parm3 = parm1 + parm2                                         00132115
        next = next + 4                                                 00132215
        iterate                                                         00132315
      end                                                               00132415
      when opcode = '02' then do               /* Multiplication     */ 00133000
        f = debug("02, "parm1"*"parm2"-->"parm3)                        00133105
        p.parm3 = parm1 * parm2                                         00133200
        next = next + 4                                                 00133301
        iterate                                                         00133400
      end                                                               00133500
      when opcode = '03' then do               /* Store              */ 00133600
        p.parm1 = theInput                                              00134700
        next = next + 2                                                 00134900
        iterate                                                         00135000
      end                                                               00135100
      when opcode = '04' then do               /* Output             */ 00135200
        say "Output: "parm1                                             00136411
        next = next + 2                                                 00136519
        iterate                                                         00136600
      end                                                               00136700
      when opcode = '05' then do               /* Jump if true       */ 00136800
        if parm1 /= 0 then next = parm2                                 00137400
                      else next = next + 3                              00137500
      end                                                               00137600
      when opcode = '06' then do               /* Jump if false      */ 00137700
        if parm1 = 0 then next = parm2                                  00138400
                     else next = next + 3                               00138500
      end                                                               00138600
      when opcode = '07' then do               /* Less than          */ 00138700
        if parm1 < parm2 then p.parm3 = 1                               00139600
                         else p.parm3 = 0                               00139700
        next = next + 4                                                 00139800
      end                                                               00139900
      when opcode = '08' then do               /* Equals             */ 00140000
        if parm1 = parm2 then p.parm3 = 1                               00140900
                         else p.parm3 = 0                               00141000
        next = next + 4                                                 00141100
      end                                                               00141200
      when opcode = '09' then do               /* Adjust relbase     */ 00141314
        relbase = relbase + parm1                                       00141514
        next = next + 2                                                 00141614
      end                                                               00141714
      when opcode = '99' then do               /* Terminate          */ 00141814
        cont = 0                                                        00141914
      end                                                               00142014
      otherwise do                                                      00142114
        say "unexpected opcode ("opcode") at "next                      00142214
      end                                                               00142314
    end                                                                 00142414
    if next > instructions then cont = 0                                00142514
  end                                                                   00142614
  return "DONE"                                                         00142714
                                                                        00142814
                                                                        00142914
debug:                                                                  00143014
  parse arg msg                                                         00143114
  if OMGINEEDDEBUG=1 then say msg                                       00144014
  return 0                                                              00150000
