/* REXX */

range = "158126-624574"


r = check('112233')
say   r
r = check('123444')
say   r
r = check('111122')
say   r


Call validPasses range, 1
call validPasses range, 2



exit

validPasses:
  parse arg r,part
  say "range:"r
  say "cehck for part "part
  parse var r low'-'high
  valids. = ''
  vcount = 0
  say "Finding passes from "low" to "high
  do p = low to high
    lowest = 0
    posval = 1
    do i = 1 to 6
      if substr(p,i,1) >= lowest then do
        lowest = substr(p,i,1)
      end
      else do
        posval = 0
        leave
      end
    end
    if posval = 1 then do
      posval = 0
      prev = substr(p,1,1)
      do i = 2 to 6
        if substr(p,i,1) = prev then do
          posval = 1
          leave
        end
        else do
          prev = substr(p,i,1)
        end
      end
      if posval = 1 then do
        if part = 1 then do
          vcount = vcount + 1
          valids.vcount = p
        end
      end
      if part =2 then do
        x = check(p)
        if x = 1 then do
          vcount = vcount + 1
          valids.vcount = p
        end
      end
    end
  end
  say "There are "vcount" valid passes"
  return 0


check:
  parse arg passwd
  res = 1
  do i = 0 to 9
    z3 = i || i || i
    if pos(z3, passwd) > 0 then do
      res = 0
      do j = 0 to 9
        if j /= i then do
          z2 = j || j
          g = pos(z2,passwd)
          if pos(z2,passwd) > 0 then do
            if substr(passwd,g+2,1) /= j & g+2 <= 6 then do
              res = 1
            end
            if g = 5 then res = 1
            trace off
          end
        end
      end
    end
  end
  return res
